# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: Check if files changed
      run: |
        URL="https://api.github.com/repos/candy02058912/toastmasters/pulls/${{ github.event.pull_request.number }}/files"
        FILES=$(curl -s -X GET -G $URL | jq -r '.[] | .filename')
        echo $FILES
        if [ $(echo $FILES | grep -c -E "test.yml|push_record.sh") = 1 ]; then
          echo -e "Detected changes to test.yml or push_record.sh"
          exit 1
        fi

    - name: Deploy swarm
      run: |
        chmod +x ./scripts/deploy_swarm.sh
        ./scripts/deploy_swarm.sh

    - name: Set replica to 1
      run: |
        chmod +x ./scripts/scale_swarm.sh
        ./scripts/scale_swarm.sh -r 1

    - name: Low concurrency test
      id: test1
      run: |
        name="$(docker ps -aqf name=demo_tester)"
        result1=$(docker exec $name ab -n 50 -c 9 -l -S -q -w 'nginx/h1' | tail -n +9)
        score1=$(echo "$result1" | grep 'Time taken for tests:' | sed -e 's/<[^>]*>//g' | sed -e 's/[A-Za-z: ]//g')
        penalty1=0
        if echo "$result1" | grep -q 'Non-2xx responses'; then
          penalty1=$(echo "$result1" | grep 'Non-2xx responses' | sed -e 's/<[^>]*>//g' | sed -e 's/[A-Za-z: -]//g')
        fi
        total1=$(python -c "print($score1+$penalty1)")
        result1="${result1//$'\n'/}"
        echo "::set-output name=result1::$result1"
        echo "::set-output name=score1::$total1"
    
    - name: Set replica to n
      run: |
        chmod +x ./scripts/scale_swarm.sh
        ./scripts/scale_swarm.sh $(awk '{if (NR != 0) {print "-s " $1 " -r " $2 }}' scale.conf)

    - name: High concurrenct test
      id: test2
      run: |
        name="$(docker ps -aqf name=demo_tester)"
        result2=$(docker exec $name ab -n 50 -c 50 -l -S -q -w 'nginx/h1' | tail -n +9)
        score2=$(echo "$result2" | grep 'Time taken for tests:' | sed -e 's/<[^>]*>//g' | sed -e 's/[A-Za-z: ]//g')
        penalty2=0
        if echo "$result1" | grep -q 'Non-2xx responses'; then
          penalty2=$(echo "$result2" | grep 'Non-2xx responses' | sed -e 's/<[^>]*>//g' | sed -e 's/[A-Za-z: -]//g')
        fi
        total2=$(python -c "print($score2+$penalty2)")
        result2="${result2//$'\n'/}"
        echo "::set-output name=result2::$result2"
        echo "::set-output name=score2::$total2"

    - name: Push to AirTable
      run: |
        name="$(docker ps -aqf name=demo_tester)"
        docker exec $name sh /push_record.sh ${{ github.actor }} ${{steps.test2.outputs.score}} ${{ secrets.AIRTABLE_API_KEY }}

    - name: Comment result to PR
      uses: unsplash/comment-on-pr@master
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      with:
        msg: "Low concurrency test: ${{steps.test1.outputs.result1}}\nHigh concurrency test: ${{steps.test2.outputs.result2}}"
        check_for_duplicate_msg: false  # OPTIONAL 
